public class ContrastFilter extends AbstractFBOFilter{
    private final int contrastLoc;
    private float contrast = 1.0f;

    public ContrastFilter(Context mContext) {
        super(mContext, R.raw.screen_vert, R.raw.contrast_frag);
        contrastLoc = GLES20.glGetUniformLocation(mProgramId, "contrast");
    }

    public void setContrast(int contrast) {
        this.contrast = contrast*0.02f;
    }

    @Override
    public int onDrawFrame(int textureId) {
        GLES20.glViewport(0, 0, mOutputWidth, mOutputHeight);

        GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, mFrameBuffers[0]);

        GLES20.glUseProgram(mProgramId);

        mGlVertexBuffer.position(0);
        GLES20.glVertexAttribPointer(vPosition, 2, GLES20.GL_FLOAT, false, 0, mGlVertexBuffer);
        GLES20.glEnableVertexAttribArray(vPosition);

        mGlTextureBuffer.position(0);
        GLES20.glVertexAttribPointer(vCoord, 2, GLES20.GL_FLOAT, false, 0, mGlTextureBuffer);
        GLES20.glEnableVertexAttribArray(vCoord);


        //传递对比度
        GLES20.glUniform1f(contrastLoc, contrast);


        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureId);
        GLES20.glUniform1i(vTexture, 0);
        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
        GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, 0);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);

        return mFBOTextures[0];
    }
}
