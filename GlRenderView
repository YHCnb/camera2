class GlRenderView @JvmOverloads constructor(context: Context?, attrs: AttributeSet? = null) :
    GLSurfaceView(context, attrs) {
    private val TAG = "GlRenderView"
    private var mSpeed = Speed.MODE_NORMAL
    private var savePath: String? = null
    private var onRecordListener: OnRecordListener? = null
    private var onShootListener: OnShootListener? = null

    enum class Speed {
        MODE_EXTRA_SLOW, MODE_SLOW, MODE_NORMAL, MODE_FAST, MODE_EXTRA_FAST
    }

    private lateinit var glRender: MyRenderer

    init {
        //设置EGL 版本
        setEGLContextClientVersion(2)
    }

    override fun setRenderer(renderer: Renderer?) {
        super.setRenderer(renderer)
        glRender = renderer as MyRenderer
        renderMode = RENDERMODE_WHEN_DIRTY //手动渲染模式
    }

    override fun surfaceDestroyed(holder: SurfaceHolder) {
        super.surfaceDestroyed(holder)
        glRender.onSurfaceDestroy()
    }

    fun shoot(path:String){
        glRender.shoot(path)
    }

    fun startRecord() {
        val speed: Float
        = when (mSpeed) {
            Speed.MODE_EXTRA_SLOW -> 0.3f
            Speed.MODE_SLOW -> 0.5f
            Speed.MODE_NORMAL -> 1f
            Speed.MODE_FAST -> 1.5f
            Speed.MODE_EXTRA_FAST -> 3f
        }
        glRender.startRecord(speed, savePath)
    }

    fun stopRecord() {
        glRender.stopRecord()
    }

    fun setCameraMode(mode:CameraMode){
        glRender.setCameraMode(mode)
    }

    fun setSpeed(speed: Speed) {
        mSpeed = speed
    }

    fun setSavePath(savePath: String?) {
        this.savePath = savePath
    }

    fun enableStick(isChecked: Boolean) {
        queueEvent { glRender.enableStick(isChecked) }
    }

    fun enableBigEye(isChecked: Boolean) {
        queueEvent { glRender.enableBigEye(isChecked) }
    }

    fun enableBeauty(isChecked: Boolean) {
        queueEvent { glRender.enableBeauty(isChecked) }
    }

    fun setOnShootListener(onShootListener: OnShootListener?) {
        if(!this::glRender.isInitialized){
            Log.d(TAG, "glRender has not been Initialized")
            return
        }
        this.onShootListener = onShootListener
        glRender.setOnShootListener(onShootListener)
    }

    fun setOnRecordListener(onRecordListener: OnRecordListener?) {
        if(!this::glRender.isInitialized){
            Log.d(TAG, "glRender has not been Initialized")
            return
        }
        this.onRecordListener = onRecordListener
        glRender.setOnRecordListener(onRecordListener)
    }
}
